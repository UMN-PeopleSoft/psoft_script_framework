#!/bin/env bash
################################################################################
##
## File Name   : startDomain
## Description : Start a PeopleSoft domain. Will include additional steps like,
##               web pool member in OTD, remove blackout in OEM, verify proper
##               startup of processes.  Only need to provide -t if stopping a
##               domain of same name on older tools version.  -o will not enable
##               a web domain in OEM, if further work is needed before routing
##               users to the web server.   -m to clear cache for app domains.
## Author      : Nate Werner
## Created     : 11/09/2017
## Updated     :
################################################################################
## Syntax      : startDomain -d <domainName> [-n <serverName>] [-t <major tools version>]
##                  [-o] [-m] [-s] [-v] [-h]
## Parameters  : -d <domainName>  : Domain name to start
##             : -n <serverName>  : Processss scheduler server name if starting
##                   a server other than PSUNX.
##             : -t <major tools version> : If not provided assumes most current
##                   else searches for specified version of domain (ie:8.54)
##             : -o  : Do not enable a web domain in OTD pool after starting
##             : -m  : If an app server domains clear all cache before starting.
##             : -s  : Start app server domain in serial mode
##             : -f  : Force Boot
## Example     : startDomain -d acsdev1
##
################################################################################

# load bootstrap dynamic path
currentPath="$( cd "$(dirname "$0")" && pwd )"
source ${currentPath%${currentPath#*scripts*/}}library/bootstrap.sh

# load needed libraries
source $LIB_HOME/monitor.sh
source $LIB_HOME/maint.sh
source $LIB_HOME/utilities.sh

# Script variables
domainName=""
serverName=""
majorToolsVer=""
skipF5=0
clearCache=0
serialBoot=0
forceBoot=0
debugFlag="n"
declare -A domAttribs
exitCode=0

## common functions
function usageInfo()
{
   echo "Usage:"
   echo "  startDomain -d <domainName> [-n <serverName>] [-t <major tools version>] [-o] [-m] [-s] [-v] [-h]"
   echo "     Start a PeopleSoft domain.  Defalt behavior will start the most current tools"
   echo "     version of the domain, adding/enabling web domains in F5, app server cache is"
   echo "     not clear, but web/prcs domains are always cleared.  Use -m to also clear app"
   echo "     server cache.  Use -o to not enable web domains in F5."
   echo " Parameters"
   echo "     -d <domainName>  : (Required) Name of domain to start"
   echo "     -n <serverName>  : (Optional/Required) Name of scheduler if not starting PSUNX"
   echo "     -t <maj_tools_ver>: (Optional) Tools version of the domain if not the most current"
   echo "     -o               : (Optional) Do not enable web domain in F5"
   echo "     -m               : (Optional) Clear cache for app server domain"
   echo "     -s               : (Optional) Start app server domain in serial mode, default parallel"
   echo "     -f               : (Optional) Force Boot of domain, start any services not running"
   echo "     -v               : Enable ansible debug/verbose mode."
   echo "     -h               : Display this help"
   echo
   echo "Sample: startDomain -d acsdev1"
   echo
   exit

}

## Main program

# get user's paramters
while getopts ":vhfomst:n:d:" optname
  do
    case "$optname" in
      "d")
        domainName=$OPTARG
        ;;
      "n")
        serverName=$OPTARG
        ;;
      "t")
        majorToolsVer=$OPTARG
        ;;
      "o")
        skipF5=1
        ;;
      "m")
        clearCache=1
        ;;
      "s")
        serialBoot=1
        ;;
      "f")
        forceBoot=1
        ;;
      "v")
        debugFlag="y"
        ;;
      "h")
        usageInfo
        ;;
      "?")
        echo "Unknown option $OPTARG"
        usageInfo
        ;;
      ":")
        echo "No argument value for option $OPTARG"
        usageInfo
        ;;
      *)
      # Should not occur
        echo "Unknown error while processing options"
        ;;
    esac
done

### Main
# verifiy required fields
if [[ -z "$domainName" ]]; then
  echo "Domain Name is required."
  usageInfo
fi

currentDate="$(date +%y%m%d_%H%M )"
maintLogFile="${PS_SCRIPT_BASE}logs/maint/startDomain_${domainName}_$currentDate.log"
util::setLogFile "$maintLogFile"
util::log "DEBUG" "****Starting startDomain for ${domainName}"

# if tools version was not provided, get most current
if [[ -z "$majorToolsVer" ]]; then
  majorToolsVer=$( inventory::getCurrentTools "$domainName")
fi

# setup vault access
export ANSIBLE_LOG_PATH=/dev/null
sec::getandStoreVaultAccess
if [[ $? -ne 0 ]]; then
  util::log "ERROR" "Unable to setup vault access"
  exit 1
fi

# apply the start domain action
util::log "DEBUG" "Calling maint::startDomain ${domainName}${serverName} ${majorToolsVer} ${skipF5} ${clearCache} ${serialBoot} ${forceBoot}"
maint::startDomain "${domainName}${serverName}" "${majorToolsVer}" "${skipF5}" "${clearCache}" "${serialBoot}" "${forceBoot}" "${debugFlag}" "${maintLogFile}"
if [ $? -ne 0 ]; then
  echo "*******"
  echo "*Error: The command "maint::startDomain "${domainName}${serverName}""${majorToolsVer} did not run to success, check logs"
  echo "*******"
  exitCode=1
fi

# End standard blackout for app/env
monitor::endBlackout "${domainName}" "${serverName}"
if [ $? -ne 0 ]; then
  echo "Error: Unable to remove blackout for domain ${domainName}${serverName}"
  exitCode=1
fi

util::log "DEBUG" "****Completed startDomain for ${domainName}"
util::log "INFO" "Details of the start operation can be found in $maintLogFile"
exit ${exitCode}
#END
