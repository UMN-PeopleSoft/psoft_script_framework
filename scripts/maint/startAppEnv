#!/bin/env bash
################################################################################
##
## File Name   : startAppEnv
## Description : Start PeopleSoft domains in an app/env. Will include additional
##               steps like, web pool member in OTD, remove blackout in OEM,
##               verify proper startup of processes.  Only need to provide -t if
##               stopping a domain of same name on older tools version.  -o will
##               not enable a web domain in OEM, if further work is needed before
##               routing users to the web server.   -m to clear cache for app domains.
## Author      : Nate Werner
## Created     : 11/09/2017
## Updated     :
################################################################################
## Syntax      : startAppEnv -a <appCode> -e <envCode> -t <major tools version>]
##                  [-y <type>] [-o] [-m] [-s] [-v] [-h]
## Parameters  : -a <app code>  : Filter by application
##             : -e <env code>  : Filter by environment
##             : -t <major tools version> : If not provided assumes most current
##                   else searches for specified version of domain (ie:8.54)
##             : -y <type>: Filter selection by type (web,app,prc), default: all
##             : -o  : Do not enable web domains in OTD
##             : -m  : If an app server domains clear all cache before starting.
##             : -s  :  Use serial boot method within each app server (Default: parallel).
##             : -f  : Force boot
##             :
## Example     : startAppEnv -a cs -e qat
##
################################################################################

# load bootstrap dynamic path
currentPath="$( cd "$(dirname "$0")" && pwd )"
source ${currentPath%${currentPath#*scripts*/}}library/bootstrap.sh

# load needed libraries
source $LIB_HOME/monitor.sh
source $LIB_HOME/maint.sh
source $LIB_HOME/utilities.sh

# Script variables
app=""
env=""
majorToolsVer=""
domainType="all"
# turn off all optional features by default
skipOTD=0
clearCache=0
serialBoot=0
forceBoot=0
purpose=""
debugFlag="n"
declare -A domAttribs
domainList=()
domainParameters=""
exitCode=0

## common functions
function usageInfo()
{
   echo "Usage:"
   echo "  startAppEnv -a <app_code> -e <env_code> [-t <major tools version>] [-o] [-m] [-s] [-v] [-h]"
   echo "     Start all domains in a specific app/env.  Defalt behavior will start"
   echo "     the most current tools version of the domain, adding/enabling web "
   echo "     domains in OTD, app server cache is not clear, but web/prcs domains"
   echo "     are always cleared.  Use -m to also clear app server cache.  Use -o"
   echo "     to not enable web domains in OTD."
   echo " Parameters"
   echo "     -a <app_code>    : (Required) Filter for an application (cs,fs,hr,ih)"
   echo "     -e <env_code>    : (Required) Filter for environment"
   echo "                          (dmo,dmn,umn,dev,tst,qat,fix,per,trn,cls,prd,upg,qrpt,rpt)"
   echo "     -t <maj_tools_ver>: (Optional) Tools version of the domain if not the most current"
   echo "     -y <type>        : (Optional) Domain type to filter on (web,app,prc)"
   echo "     -o               : (Optional) Do not enable web domains in OTD"
   echo "     -m               : (Optional) Clear cache for app server domain"
   echo "     -s               : (Optional) Use serial boot method within each app server (Default: parallel)."
   echo "     -f               : (Optional) Force boot, start any sub-services not running"
   echo "     -u <purpose>     : (Optional) main, ib, ren, trace"
   echo "     -v               : Enable ansible debug/verbose mode."
   echo "     -h               : Display this help"
   echo
   echo "Sample: startAppEnv -a cs -e dev -y web"
   echo "                starts the cs dev web domains in parallel"
   echo
   exit

}

######## Main program

# get user's parameters
while getopts ":vhofmsy:t:e:a:u:" optname; do
    case "$optname" in
      "a")
        app=$OPTARG
        ;;
      "e")
        env=$OPTARG
        ;;
      "t")
        majorToolsVer=$OPTARG
        ;;
      "y")
        domainType=$OPTARG
        ;;
      "o")
        skipOTD=1
        ;;
      "m")
        clearCache=1
        ;;
      "s")
        serialBoot=1
        ;;
      "f")
        forceBoot=1
        ;;
      "u")
        purpose=$OPTARG
        ;;
      "v")
        debugFlag="y"
        export debugFlag
        ;;
      "h")
        usageInfo
        ;;
      "?")
        echo "Unknown option $OPTARG"
        usageInfo
        ;;
      ":")
        echo "No argument value for option $OPTARG"
        usageInfo
        ;;
      *)
      # Should not occur
        echo "Unknown error while processing options"
        ;;
    esac
done

### Main
# verifiy required fields
if [[ -z "$app" || -z "$env" ]]; then
  echo "App and Env code is required."
  usageInfo
fi

currentDate="$(date +%y%m%d_%H%M )"
maintLogFile="${PS_SCRIPT_BASE}logs/maint/startAppEnv_${app}${env}_$currentDate.log"
util::setLogFile "$maintLogFile"
util::log "DEBUG" "****Starting startAppEnv for ${app}${env}"

# set defaults
if [[ -z "$domainType" ]]; then
  domainType="all"
fi
# if tools version was not provided, get most current
if [[ -z "$majorToolsVer" ]]; then
  majorToolsVer=$( inventory::getCurrentToolsAppEnv "$app" "$env" "$domainType")
fi
util::log "DEBUG" "stopAppEnv: Selected tools version: $majorToolsVer"

util::log "DEBUG" "Calling domain::getDomainsByEnv $app $env $domainType $purpose $majorToolsVer"
# get array of domains in app/env
inventory::getDomainsByEnv "$app" "$env" "$domainType" "$purpose" "$majorToolsVer" domainList
if [[ $? -ne 0 ]]; then
  util::log "ERROR" "Invalid app/env selected (domain::getDomainsByEnv)"
  exit 1
else
  util::log "INFO" "****Initiating startup for $domainType $app $env $purpose"

  # setup vault access
  export ANSIBLE_LOG_PATH=/dev/null
  sec::getandStoreVaultAccess
  if [[ $? -ne 0 ]]; then
    util::log "ERROR" "Unable to setup vault access"
    exit 1
  fi
  # Create list of __startDomain parameters from domain list
  for domain in ${domainList[@]}; do
     domainParameters="${domainParameters}${domain} ${majorToolsVer} ${skipOTD} ${clearCache} ${serialBoot} ${forceBoot} ${debugFlag} ${maintLogFile} "
  done
  util::log "DEBUG" "Domain Parm List: $domainParameters"

  # make parallel parse the parameters with field speparator of space
  IFS=' '
  ## Now fire off commands in parallel, each command having 7 parameters
  util::log "DEBUG" "Calling parallel -j 0 -n 8 --joblog jlog_${app}${env} --line-buffer maint::startDomain {1} {2} {3} {4} {5} {6} {7} {8}"
  parallel -j 0 -n 8 --joblog jlog_${app}${env} --line-buffer maint::startDomain {1} {2} {3} {4} {5} {6} {7} {8} ::: $domainParameters
  parallelExit=$?
  if [[ $parallelExit -ne 0 ]]; then
    util::log "ERROR" "Parallel command failed with exit code: $parallelExit , out of space/memory?"
  fi
  util::log "DEBUG" "Parallel command log output: "
  cat jlog_${app}${env} >> $maintLogFile

  IFS=$'\n'
  # Check job log (jlog) for any errors
  errorList=( $( grep -v '0'$'\t''0' jlog_${app}${env} | grep -v JobRuntime ) )
  if [[ -n "$errorList" ]]; then
    for process in ${errorList[@]}; do
       failedCommand=$( echo $process | awk -F' ' '{ print $9" "$10" "$11 }' )
       echo "*******"
       util::log "ERROR" "The parallel command for \"$failedCommand\" did not run to success, check logs"
       echo "*******"
       exitCode=1
    done
  fi

  totalDomains=${#domainList[@]}
  faildDomains=${#errorList[@]}
  failedRate=$( echo "scale=2; $faildDomains / $totalDomains" | bc -l )
  if (( $(bc <<< "$failedRate < 0.25") )); then
    # End standard blackout for app/env
    util::log "DEBUG" "Calling monitor::endBlackoutAppEnv $app $env"
    monitor::endBlackoutAppEnv "$app" "$env"
  else
    util::log "WARNING" "Too many domains failed startup, not ending blackout at startup.  Note: The original blackout may end soon, manually add new blackout if needed."
  fi

  util::log "INFO" "Completed startup for $domainType $app $env"

  # remove log file
  rm -f jlog_${app}${env}
fi

util::log "DEBUG" "****Completed startAppEnv for ${app}${env}"
util::log "INFO" "Details of the startAppEnv operation can be found in $maintLogFile"
exit ${exitCode}
#END
